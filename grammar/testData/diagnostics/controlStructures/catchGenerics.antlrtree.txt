File: catchGenerics.kt - ae02f26be6b207453ef30bed8fcf4c00
  NL("\n")
  NL("\n")
  NL("\n")
  NL("\n")
  packageHeader
  importList
  topLevelObject
    declaration
      classDeclaration
        CLASS("class")
        simpleIdentifier
          Identifier("ZException")
        typeParameters
          LANGLE("<")
          typeParameter
            simpleIdentifier
              Identifier("T")
          RANGLE(">")
        primaryConstructor
          classParameters
            LPAREN("(")
            classParameter
              VAL("val")
              simpleIdentifier
                Identifier("p")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("T")
            RPAREN(")")
        COLON(":")
        delegationSpecifiers
          annotatedDelegationSpecifier
            delegationSpecifier
              constructorInvocation
                userType
                  simpleUserType
                    simpleIdentifier
                      Identifier("Exception")
                valueArguments
                  LPAREN("(")
                  RPAREN(")")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      classDeclaration
        CLASS("class")
        simpleIdentifier
          Identifier("YException")
        typeParameters
          LANGLE("<")
          typeParameter
            simpleIdentifier
              Identifier("T")
          RANGLE(">")
        primaryConstructor
          classParameters
            LPAREN("(")
            classParameter
              VAL("val")
              simpleIdentifier
                Identifier("p")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("T")
            RPAREN(")")
        COLON(":")
        delegationSpecifiers
          annotatedDelegationSpecifier
            delegationSpecifier
              constructorInvocation
                userType
                  simpleUserType
                    simpleIdentifier
                      Identifier("java")
                  DOT(".")
                  simpleUserType
                    simpleIdentifier
                      Identifier("lang")
                  DOT(".")
                  simpleUserType
                    simpleIdentifier
                      Identifier("RuntimeException")
                valueArguments
                  LPAREN("(")
                  RPAREN(")")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      classDeclaration
        CLASS("class")
        simpleIdentifier
          Identifier("XException")
        typeParameters
          LANGLE("<")
          typeParameter
            simpleIdentifier
              Identifier("T")
          RANGLE(">")
        primaryConstructor
          classParameters
            LPAREN("(")
            classParameter
              VAL("val")
              simpleIdentifier
                Identifier("p")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("T")
            RPAREN(")")
        COLON(":")
        delegationSpecifiers
          annotatedDelegationSpecifier
            delegationSpecifier
              constructorInvocation
                userType
                  simpleUserType
                    simpleIdentifier
                      Identifier("Throwable")
                valueArguments
                  LPAREN("(")
                  RPAREN(")")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("bar")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            NL("\n")
            statements
              statement
                expression
                  disjunction
                    conjunction
                      equality
                        comparison
                          genericCallLikeComparison
                            infixOperation
                              elvisExpression
                                infixFunctionCall
                                  rangeExpression
                                    additiveExpression
                                      multiplicativeExpression
                                        asExpression
                                          prefixUnaryExpression
                                            postfixUnaryExpression
                                              primaryExpression
                                                tryExpression
                                                  TRY("try")
                                                  block
                                                    LCURL("{")
                                                    NL("\n")
                                                    statements
                                                      statement
                                                        expression
                                                          disjunction
                                                            conjunction
                                                              equality
                                                                comparison
                                                                  genericCallLikeComparison
                                                                    infixOperation
                                                                      elvisExpression
                                                                        infixFunctionCall
                                                                          rangeExpression
                                                                            additiveExpression
                                                                              multiplicativeExpression
                                                                                asExpression
                                                                                  prefixUnaryExpression
                                                                                    postfixUnaryExpression
                                                                                      primaryExpression
                                                                                        jumpExpression
                                                                                          THROW("throw")
                                                                                          expression
                                                                                            disjunction
                                                                                              conjunction
                                                                                                equality
                                                                                                  comparison
                                                                                                    genericCallLikeComparison
                                                                                                      infixOperation
                                                                                                        elvisExpression
                                                                                                          infixFunctionCall
                                                                                                            rangeExpression
                                                                                                              additiveExpression
                                                                                                                multiplicativeExpression
                                                                                                                  asExpression
                                                                                                                    prefixUnaryExpression
                                                                                                                      postfixUnaryExpression
                                                                                                                        primaryExpression
                                                                                                                          simpleIdentifier
                                                                                                                            Identifier("ZException")
                                                                                                                        postfixUnarySuffix
                                                                                                                          callSuffix
                                                                                                                            valueArguments
                                                                                                                              LPAREN("(")
                                                                                                                              valueArgument
                                                                                                                                expression
                                                                                                                                  disjunction
                                                                                                                                    conjunction
                                                                                                                                      equality
                                                                                                                                        comparison
                                                                                                                                          genericCallLikeComparison
                                                                                                                                            infixOperation
                                                                                                                                              elvisExpression
                                                                                                                                                infixFunctionCall
                                                                                                                                                  rangeExpression
                                                                                                                                                    additiveExpression
                                                                                                                                                      multiplicativeExpression
                                                                                                                                                        asExpression
                                                                                                                                                          prefixUnaryExpression
                                                                                                                                                            postfixUnaryExpression
                                                                                                                                                              primaryExpression
                                                                                                                                                                literalConstant
                                                                                                                                                                  IntegerLiteral("11")
                                                                                                                              RPAREN(")")
                                                      semis
                                                        NL("\n")
                                                    RCURL("}")
                                                  catchBlock
                                                    CATCH("catch")
                                                    LPAREN("(")
                                                    simpleIdentifier
                                                      Identifier("e")
                                                    COLON(":")
                                                    type
                                                      typeReference
                                                        userType
                                                          simpleUserType
                                                            simpleIdentifier
                                                              Identifier("ZException")
                                                            typeArguments
                                                              LANGLE("<")
                                                              typeProjection
                                                                MULT("*")
                                                              RANGLE(">")
                                                    RPAREN(")")
                                                    block
                                                      LCURL("{")
                                                      statements
                                                      RCURL("}")
              semis
                NL("\n")
            RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        modifiers
          modifier
            functionModifier
              INLINE("inline")
        FUN("fun")
        typeParameters
          LANGLE("<")
          typeParameter
            typeParameterModifiers
              typeParameterModifier
                reificationModifier
                  REIFIED("reified")
            simpleIdentifier
              Identifier("E")
            COLON(":")
            type
              typeReference
                userType
                  simpleUserType
                    simpleIdentifier
                      Identifier("Exception")
          COMMA(",")
          typeParameter
            simpleIdentifier
              Identifier("R")
          RANGLE(">")
        simpleIdentifier
          Identifier("tryCatch")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("lazy")
              COLON(":")
              type
                functionType
                  functionTypeParameters
                    LPAREN("(")
                    RPAREN(")")
                  ARROW("->")
                  type
                    typeReference
                      userType
                        simpleUserType
                          simpleIdentifier
                            Identifier("R")
          COMMA(",")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("failure")
              COLON(":")
              type
                functionType
                  functionTypeParameters
                    LPAREN("(")
                    type
                      typeReference
                        userType
                          simpleUserType
                            simpleIdentifier
                              Identifier("E")
                    RPAREN(")")
                  ARROW("->")
                  type
                    typeReference
                      userType
                        simpleUserType
                          simpleIdentifier
                            Identifier("R")
          RPAREN(")")
        COLON(":")
        type
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("R")
        functionBody
          ASSIGNMENT("=")
          NL("\n")
          expression
            disjunction
              conjunction
                equality
                  comparison
                    genericCallLikeComparison
                      infixOperation
                        elvisExpression
                          infixFunctionCall
                            rangeExpression
                              additiveExpression
                                multiplicativeExpression
                                  asExpression
                                    prefixUnaryExpression
                                      postfixUnaryExpression
                                        primaryExpression
                                          tryExpression
                                            TRY("try")
                                            block
                                              LCURL("{")
                                              NL("\n")
                                              statements
                                                statement
                                                  expression
                                                    disjunction
                                                      conjunction
                                                        equality
                                                          comparison
                                                            genericCallLikeComparison
                                                              infixOperation
                                                                elvisExpression
                                                                  infixFunctionCall
                                                                    rangeExpression
                                                                      additiveExpression
                                                                        multiplicativeExpression
                                                                          asExpression
                                                                            prefixUnaryExpression
                                                                              postfixUnaryExpression
                                                                                primaryExpression
                                                                                  simpleIdentifier
                                                                                    Identifier("lazy")
                                                                                postfixUnarySuffix
                                                                                  callSuffix
                                                                                    valueArguments
                                                                                      LPAREN("(")
                                                                                      RPAREN(")")
                                                semis
                                                  NL("\n")
                                              RCURL("}")
                                            catchBlock
                                              CATCH("catch")
                                              LPAREN("(")
                                              simpleIdentifier
                                                Identifier("e")
                                              COLON(":")
                                              type
                                                typeReference
                                                  userType
                                                    simpleUserType
                                                      simpleIdentifier
                                                        Identifier("E")
                                              RPAREN(")")
                                              block
                                                LCURL("{")
                                                NL("\n")
                                                statements
                                                  statement
                                                    expression
                                                      disjunction
                                                        conjunction
                                                          equality
                                                            comparison
                                                              genericCallLikeComparison
                                                                infixOperation
                                                                  elvisExpression
                                                                    infixFunctionCall
                                                                      rangeExpression
                                                                        additiveExpression
                                                                          multiplicativeExpression
                                                                            asExpression
                                                                              prefixUnaryExpression
                                                                                postfixUnaryExpression
                                                                                  primaryExpression
                                                                                    simpleIdentifier
                                                                                      Identifier("failure")
                                                                                  postfixUnarySuffix
                                                                                    callSuffix
                                                                                      valueArguments
                                                                                        LPAREN("(")
                                                                                        valueArgument
                                                                                          expression
                                                                                            disjunction
                                                                                              conjunction
                                                                                                equality
                                                                                                  comparison
                                                                                                    genericCallLikeComparison
                                                                                                      infixOperation
                                                                                                        elvisExpression
                                                                                                          infixFunctionCall
                                                                                                            rangeExpression
                                                                                                              additiveExpression
                                                                                                                multiplicativeExpression
                                                                                                                  asExpression
                                                                                                                    prefixUnaryExpression
                                                                                                                      postfixUnaryExpression
                                                                                                                        primaryExpression
                                                                                                                          simpleIdentifier
                                                                                                                            Identifier("e")
                                                                                        RPAREN(")")
                                                  semis
                                                    NL("\n")
                                                RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        typeParameters
          LANGLE("<")
          typeParameter
            simpleIdentifier
              Identifier("T")
            COLON(":")
            type
              typeReference
                userType
                  simpleUserType
                    simpleIdentifier
                      Identifier("Throwable")
          RANGLE(">")
        simpleIdentifier
          Identifier("tryCatch")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            NL("\n")
            statements
              statement
                expression
                  disjunction
                    conjunction
                      equality
                        comparison
                          genericCallLikeComparison
                            infixOperation
                              elvisExpression
                                infixFunctionCall
                                  rangeExpression
                                    additiveExpression
                                      multiplicativeExpression
                                        asExpression
                                          prefixUnaryExpression
                                            postfixUnaryExpression
                                              primaryExpression
                                                tryExpression
                                                  TRY("try")
                                                  block
                                                    LCURL("{")
                                                    statements
                                                    RCURL("}")
                                                  catchBlock
                                                    CATCH("catch")
                                                    LPAREN("(")
                                                    simpleIdentifier
                                                      Identifier("e")
                                                    COLON(":")
                                                    type
                                                      typeReference
                                                        userType
                                                          simpleUserType
                                                            simpleIdentifier
                                                              Identifier("T")
                                                    RPAREN(")")
                                                    block
                                                      LCURL("{")
                                                      statements
                                                      RCURL("}")
              semis
                NL("\n")
            RCURL("}")
  EOF("<EOF>")
