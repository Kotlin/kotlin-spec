File: recursiveSamsAndInvoke.test.kt - 09d94bd7afff51bdf069150ea3fa8ffe
  packageHeader
  importList
  topLevelObject
    declaration
      typeAlias
        TYPE_ALIAS("typealias")
        simpleIdentifier
          Identifier("Handler")
        ASSIGNMENT("=")
        type
          functionType
            functionTypeParameters
              LPAREN("(")
              parameter
                simpleIdentifier
                  Identifier("cause")
                COLON(":")
                type
                  nullableType
                    typeReference
                      userType
                        simpleUserType
                          simpleIdentifier
                            Identifier("Throwable")
                    quest
                      QUEST_NO_WS("?")
              RPAREN(")")
            ARROW("->")
            type
              typeReference
                userType
                  simpleUserType
                    simpleIdentifier
                      Identifier("Unit")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        typeParameters
          LANGLE("<")
          typeParameter
            simpleIdentifier
              Identifier("T")
          RANGLE(">")
        receiverType
          typeReference
            userType
              simpleUserType
                simpleIdentifier
                  Identifier("MyFuture")
                typeArguments
                  LANGLE("<")
                  typeProjection
                    type
                      typeReference
                        userType
                          simpleUserType
                            simpleIdentifier
                              Identifier("T")
                  RANGLE(">")
        DOT(".")
        simpleIdentifier
          Identifier("setup")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            NL("\n")
            statements
              statement
                expression
                  disjunction
                    conjunction
                      equality
                        comparison
                          genericCallLikeComparison
                            infixOperation
                              elvisExpression
                                infixFunctionCall
                                  rangeExpression
                                    additiveExpression
                                      multiplicativeExpression
                                        asExpression
                                          prefixUnaryExpression
                                            postfixUnaryExpression
                                              primaryExpression
                                                simpleIdentifier
                                                  Identifier("addListener")
                                              postfixUnarySuffix
                                                callSuffix
                                                  valueArguments
                                                    LPAREN("(")
                                                    valueArgument
                                                      expression
                                                        disjunction
                                                          conjunction
                                                            equality
                                                              comparison
                                                                genericCallLikeComparison
                                                                  infixOperation
                                                                    elvisExpression
                                                                      infixFunctionCall
                                                                        rangeExpression
                                                                          additiveExpression
                                                                            multiplicativeExpression
                                                                              asExpression
                                                                                prefixUnaryExpression
                                                                                  postfixUnaryExpression
                                                                                    primaryExpression
                                                                                      simpleIdentifier
                                                                                        Identifier("ListenerImpl")
                                                                                    postfixUnarySuffix
                                                                                      typeArguments
                                                                                        LANGLE("<")
                                                                                        typeProjection
                                                                                          type
                                                                                            typeReference
                                                                                              userType
                                                                                                simpleUserType
                                                                                                  simpleIdentifier
                                                                                                    Identifier("T")
                                                                                        COMMA(",")
                                                                                        typeProjection
                                                                                          type
                                                                                            typeReference
                                                                                              userType
                                                                                                simpleUserType
                                                                                                  simpleIdentifier
                                                                                                    Identifier("MyFuture")
                                                                                                  typeArguments
                                                                                                    LANGLE("<")
                                                                                                    typeProjection
                                                                                                      type
                                                                                                        typeReference
                                                                                                          userType
                                                                                                            simpleUserType
                                                                                                              simpleIdentifier
                                                                                                                Identifier("T")
                                                                                                    RANGLE(">")
                                                                                        RANGLE(">")
                                                                                    postfixUnarySuffix
                                                                                      callSuffix
                                                                                        valueArguments
                                                                                          LPAREN("(")
                                                                                          RPAREN(")")
                                                    RPAREN(")")
              semis
                NL("\n")
              statement
                expression
                  disjunction
                    conjunction
                      equality
                        comparison
                          genericCallLikeComparison
                            infixOperation
                              elvisExpression
                                infixFunctionCall
                                  rangeExpression
                                    additiveExpression
                                      multiplicativeExpression
                                        asExpression
                                          prefixUnaryExpression
                                            postfixUnaryExpression
                                              primaryExpression
                                                simpleIdentifier
                                                  Identifier("addListener")
                                              postfixUnarySuffix
                                                callSuffix
                                                  annotatedLambda
                                                    lambdaLiteral
                                                      LCURL("{")
                                                      statements
                                                      RCURL("}")
              semis
                NL("\n")
            RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      classDeclaration
        CLASS("class")
        simpleIdentifier
          Identifier("ListenerImpl")
        typeParameters
          LANGLE("<")
          typeParameter
            simpleIdentifier
              Identifier("T")
          COMMA(",")
          typeParameter
            simpleIdentifier
              Identifier("F")
            COLON(":")
            type
              typeReference
                userType
                  simpleUserType
                    simpleIdentifier
                      Identifier("MyFuture")
                    typeArguments
                      LANGLE("<")
                      typeProjection
                        type
                          typeReference
                            userType
                              simpleUserType
                                simpleIdentifier
                                  Identifier("T")
                      RANGLE(">")
          RANGLE(">")
        COLON(":")
        delegationSpecifiers
          annotatedDelegationSpecifier
            delegationSpecifier
              userType
                simpleUserType
                  simpleIdentifier
                    Identifier("MyListener")
                  typeArguments
                    LANGLE("<")
                    typeProjection
                      type
                        typeReference
                          userType
                            simpleUserType
                              simpleIdentifier
                                Identifier("F")
                    RANGLE(">")
          COMMA(",")
          annotatedDelegationSpecifier
            delegationSpecifier
              userType
                simpleUserType
                  simpleIdentifier
                    Identifier("Handler")
        classBody
          LCURL("{")
          NL("\n")
          classMemberDeclarations
            classMemberDeclaration
              declaration
                functionDeclaration
                  modifiers
                    modifier
                      memberModifier
                        OVERRIDE("override")
                  FUN("fun")
                  simpleIdentifier
                    Identifier("operationComplete")
                  functionValueParameters
                    LPAREN("(")
                    functionValueParameter
                      parameter
                        simpleIdentifier
                          Identifier("future")
                        COLON(":")
                        type
                          typeReference
                            userType
                              simpleUserType
                                simpleIdentifier
                                  Identifier("F")
                    RPAREN(")")
                  functionBody
                    block
                      LCURL("{")
                      NL("\n")
                      statements
                      RCURL("}")
            semis
              NL("\n")
              NL("\n")
            classMemberDeclaration
              declaration
                functionDeclaration
                  modifiers
                    modifier
                      memberModifier
                        OVERRIDE("override")
                  FUN("fun")
                  simpleIdentifier
                    Identifier("invoke")
                  functionValueParameters
                    LPAREN("(")
                    functionValueParameter
                      parameter
                        simpleIdentifier
                          Identifier("cause")
                        COLON(":")
                        type
                          nullableType
                            typeReference
                              userType
                                simpleUserType
                                  simpleIdentifier
                                    Identifier("Throwable")
                            quest
                              QUEST_NO_WS("?")
                    RPAREN(")")
                  functionBody
                    block
                      LCURL("{")
                      NL("\n")
                      statements
                      RCURL("}")
            semis
              NL("\n")
          RCURL("}")
  EOF("<EOF>")
