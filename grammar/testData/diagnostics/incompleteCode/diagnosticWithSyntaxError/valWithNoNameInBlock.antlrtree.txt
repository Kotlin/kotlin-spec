File: valWithNoNameInBlock.kt - b772ea79a95d74b82c3672d52843729e (WITH_ERRORS)
  NL("\n")
  NL("\n")
  NL("\n")
  packageHeader
  importList
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("println")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("x")
              COLON(":")
              type
                typeReference
                  userType
                    simpleUserType
                      simpleIdentifier
                        Identifier("String")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            NL("\n")
            statements
            RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("run")
        functionValueParameters
          LPAREN("(")
          functionValueParameter
            parameter
              simpleIdentifier
                Identifier("block")
              COLON(":")
              type
                functionType
                  functionTypeParameters
                    LPAREN("(")
                    RPAREN(")")
                  ARROW("->")
                  type
                    typeReference
                      userType
                        simpleUserType
                          simpleIdentifier
                            Identifier("Unit")
          RPAREN(")")
        functionBody
          block
            LCURL("{")
            statements
            RCURL("}")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        variableDeclaration
          simpleIdentifier
            Identifier("propertyNameOnTheNextLine")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  genericCallLikeComparison
                    infixOperation
                      elvisExpression
                        infixFunctionCall
                          rangeExpression
                            additiveExpression
                              multiplicativeExpression
                                asExpression
                                  prefixUnaryExpression
                                    postfixUnaryExpression
                                      primaryExpression
                                        literalConstant
                                          IntegerLiteral("1")
        NL("\n")
        NL("\n")
  topLevelObject
    declaration
      functionDeclaration
        FUN("fun")
        simpleIdentifier
          Identifier("foo")
        functionValueParameters
          LPAREN("(")
          RPAREN(")")
  LCURL("{")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        NL("\n")
        variableDeclaration
          simpleIdentifier
            Identifier("println")
        LPAREN("(")
        QUOTE_OPEN(""")
        LineStrText("abc")
        QUOTE_CLOSE(""")
        RPAREN(")")
    semis
      NL("\n")
      NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        NL("\n")
        variableDeclaration
          simpleIdentifier
            Identifier("run")
        LCURL("{")
    semis
      NL("\n")
  Identifier("println")
  LPAREN("(")
  QUOTE_OPEN(""")
  LineStrText("abc")
  QUOTE_CLOSE(""")
  RPAREN(")")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
    semis
      NL("\n")
  IF("if")
  LPAREN("(")
  IntegerLiteral("1")
  EQEQ("==")
  IntegerLiteral("1")
  RPAREN(")")
  LCURL("{")
  NL("\n")
  NL("\n")
  RCURL("}")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
    semis
      NL("\n")
  LPAREN("(")
  IntegerLiteral("1")
  ADD("+")
  IntegerLiteral("2")
  RPAREN(")")
  NL("\n")
  NL("\n")
  NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        NL("\n")
        variableDeclaration
          simpleIdentifier
            Identifier("propertyNameOnTheNextLine")
        NL("\n")
        NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        NL("\n")
        NL("\n")
        variableDeclaration
          simpleIdentifier
            Identifier("propertyNameOnTheNextLine")
        NL("\n")
        NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        NL("\n")
        variableDeclaration
          simpleIdentifier
            Identifier("propertyNameOnTheNextLine")
        NL("\n")
        NL("\n")
        NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        NL("\n")
        variableDeclaration
          simpleIdentifier
            Identifier("property1")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  genericCallLikeComparison
                    infixOperation
                      elvisExpression
                        infixFunctionCall
                          rangeExpression
                            additiveExpression
                              multiplicativeExpression
                                asExpression
                                  prefixUnaryExpression
                                    postfixUnaryExpression
                                      primaryExpression
                                        literalConstant
                                          IntegerLiteral("1")
        NL("\n")
        NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        NL("\n")
        variableDeclaration
          simpleIdentifier
            Identifier("propertyWithBy")
        propertyDelegate
          BY("by")
          expression
            disjunction
              conjunction
                equality
                  comparison
                    genericCallLikeComparison
                      infixOperation
                        elvisExpression
                          infixFunctionCall
                            rangeExpression
                              additiveExpression
                                multiplicativeExpression
                                  asExpression
                                    prefixUnaryExpression
                                      postfixUnaryExpression
                                        primaryExpression
                                          simpleIdentifier
                                            Identifier("lazy")
                                        postfixUnarySuffix
                                          callSuffix
                                            annotatedLambda
                                              lambdaLiteral
                                                LCURL("{")
                                                statements
                                                  statement
                                                    expression
                                                      disjunction
                                                        conjunction
                                                          equality
                                                            comparison
                                                              genericCallLikeComparison
                                                                infixOperation
                                                                  elvisExpression
                                                                    infixFunctionCall
                                                                      rangeExpression
                                                                        additiveExpression
                                                                          multiplicativeExpression
                                                                            asExpression
                                                                              prefixUnaryExpression
                                                                                postfixUnaryExpression
                                                                                  primaryExpression
                                                                                    literalConstant
                                                                                      IntegerLiteral("1")
                                                RCURL("}")
        NL("\n")
        NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        NL("\n")
        variableDeclaration
          simpleIdentifier
            Identifier("propertyWithType")
          COLON(":")
          type
            typeReference
              userType
                simpleUserType
                  simpleIdentifier
                    Identifier("Int")
        NL("\n")
        NL("\n")
  topLevelObject
    declaration
      propertyDeclaration
        VAL("val")
        NL("\n")
        multiVariableDeclaration
          LPAREN("(")
          variableDeclaration
            simpleIdentifier
              Identifier("a")
          COMMA(",")
          variableDeclaration
            simpleIdentifier
              Identifier("b")
          RPAREN(")")
        ASSIGNMENT("=")
        expression
          disjunction
            conjunction
              equality
                comparison
                  genericCallLikeComparison
                    infixOperation
                      elvisExpression
                        infixFunctionCall
                          rangeExpression
                            additiveExpression
                              multiplicativeExpression
                                asExpression
                                  prefixUnaryExpression
                                    postfixUnaryExpression
                                      primaryExpression
                                        literalConstant
                                          IntegerLiteral("1")
    semis
      NL("\n")
  RCURL("}")
  NL("\n")
  EOF("<EOF>")
